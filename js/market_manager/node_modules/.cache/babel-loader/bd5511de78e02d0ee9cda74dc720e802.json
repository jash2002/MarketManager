{"ast":null,"code":"var _jsxFileName = \"/home/simon/Documents/University/comp208/MarketManager/MarketManager/js/market_manager/src/Components/CandleStickChart.js\";\nimport React from \"react\";\nimport Chart from \"react-apexcharts\";\n/**\n * Component to query API and produce Candlestick Chart.\n * @component\n * @extends React.Component\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CandleStickChart extends React.Component {\n  /**\n   * Set up new blank Candlestick chart.\n   */\n  constructor(props) {\n    super(props);\n    this.fetchStock = this.fetchStock.bind(this);\n    this.state = {\n      options: {\n        chart: {\n          type: 'candlestick',\n          height: 350\n        },\n        title: {\n          text: props.ticker,\n          align: 'left'\n        },\n        xaxis: {\n          type: 'datetime'\n        },\n        yaxis: {\n          tooltip: {\n            enabled: true\n          }\n        },\n        noData: {\n          text: \"loading...\"\n        }\n      },\n      series: [],\n      type: 'time_series?',\n      APIparams: props.APIparams,\n      height: props.height,\n      width: props.width\n    };\n    this.fetchStock(this.state.APIparams);\n  }\n  /**\n   * Fetch stock data to API and store in state.\n   */\n\n\n  fetchStock(APIparams) {\n    /**\n     * TODO: Fetch API key from backend.\n     * Unsafe to really store in React files, and have it on github.\n     * For now, copy from discord, and remove before commiting.\n     */\n    const API_KEY = '1342ec4264ea43d384a7ad5673a7d5ac';\n    let API_Call = 'https://api.twelvedata.com/' + this.state.type + APIparams + '&apikey=' + API_KEY;\n    const that = this;\n    fetch(API_Call).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      var parsedData = JSON.parse(JSON.stringify(data.values));\n      var formattedData = []; // Reformat data into date and floats.\n\n      for (var currentInterval in parsedData) {\n        formattedData.push([+new Date(parsedData[currentInterval].datetime), parseFloat(parsedData[currentInterval].open), parseFloat(parsedData[currentInterval].high), parseFloat(parsedData[currentInterval].low), parseFloat(parsedData[currentInterval].close)]);\n      }\n\n      const newData = [{\n        data: formattedData\n      }]; // Update data for graph.\n\n      that.setState({\n        series: newData\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.APIparams !== prevProps.APIparams) {\n      this.fetchStock(this.props.APIparams);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Chart, {\n      options: this.state.options,\n      series: this.state.series,\n      type: \"candlestick\",\n      height: this.state.height,\n      width: this.state.width\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default CandleStickChart;","map":{"version":3,"sources":["/home/simon/Documents/University/comp208/MarketManager/MarketManager/js/market_manager/src/Components/CandleStickChart.js"],"names":["React","Chart","CandleStickChart","Component","constructor","props","fetchStock","bind","state","options","chart","type","height","title","text","ticker","align","xaxis","yaxis","tooltip","enabled","noData","series","APIparams","width","API_KEY","API_Call","that","fetch","then","response","json","data","parsedData","JSON","parse","stringify","values","formattedData","currentInterval","push","Date","datetime","parseFloat","open","high","low","close","newData","setState","componentDidUpdate","prevProps","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Chart from \"react-apexcharts\";\n/**\n * Component to query API and produce Candlestick Chart.\n * @component\n * @extends React.Component\n */\nclass CandleStickChart extends React.Component {\n    /**\n     * Set up new blank Candlestick chart.\n     */\n    constructor(props) {\n        super(props);\n        this.fetchStock = this.fetchStock.bind(this);\n        this.state = {\n            options: {\n                chart: {\n                    type: 'candlestick',\n                    height: 350\n                  },\n                title: {\n                    text: props.ticker,\n                    align: 'left'\n                },\n                xaxis: {\n                    type: 'datetime'\n                },\n                yaxis: {\n                    tooltip: {\n                      enabled: true\n                    }\n                },\n                noData: {\n                    text: \"loading...\"\n                }\n            },\n            series: [],\n            type: 'time_series?',\n            APIparams: props.APIparams,\n            height: props.height,\n            width: props.width\n        };\n        this.fetchStock(this.state.APIparams)\n    }\n\n    /**\n     * Fetch stock data to API and store in state.\n     */\n    fetchStock(APIparams) {\n        /**\n         * TODO: Fetch API key from backend.\n         * Unsafe to really store in React files, and have it on github.\n         * For now, copy from discord, and remove before commiting.\n         */\n        const API_KEY = '1342ec4264ea43d384a7ad5673a7d5ac'\n        let API_Call = 'https://api.twelvedata.com/'+this.state.type+APIparams+'&apikey='+API_KEY;\n        const that = this;\n        fetch(API_Call)\n        .then(\n            function(response) {\n                return response.json();\n            }\n        )\n        .then(\n            function(data) {\n                var parsedData = JSON.parse(JSON.stringify(data.values))\n                var formattedData = []\n                // Reformat data into date and floats.\n                for (var currentInterval in parsedData) {\n                    formattedData.push(\n                        [\n                            +new Date(parsedData[currentInterval].datetime),\n                            parseFloat(parsedData[currentInterval].open),\n                            parseFloat(parsedData[currentInterval].high),\n                            parseFloat(parsedData[currentInterval].low),\n                            parseFloat(parsedData[currentInterval].close)\n                        ]\n                    )\n                }\n                const newData = [{data: formattedData}]\n                // Update data for graph.\n                that.setState({series: newData});\n            }\n        )\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.APIparams !== prevProps.APIparams) {\n            this.fetchStock(this.props.APIparams)\n        }\n    }\n\n    render(){\n        return (\n            <Chart\n              options={this.state.options}\n              series={this.state.series}\n              type=\"candlestick\"\n              height={this.state.height}\n              width={this.state.width}\n            />\n        );\n    }\n}\nexport default CandleStickChart;"]},"metadata":{},"sourceType":"module"}